/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMessage } from '../fn/message/create-message';
import { CreateMessage$Params } from '../fn/message/create-message';
import { createMessageWithFile } from '../fn/message/create-message-with-file';
import { CreateMessageWithFile$Params } from '../fn/message/create-message-with-file';
import { GeneralResponseListMessageInformationResponse } from '../models/general-response-list-message-information-response';
import { GeneralResponseString } from '../models/general-response-string';
import { getAllMessages } from '../fn/message/get-all-messages';
import { GetAllMessages$Params } from '../fn/message/get-all-messages';
import { setMessagesToSeen } from '../fn/message/set-messages-to-seen';
import { SetMessagesToSeen$Params } from '../fn/message/set-messages-to-seen';


/**
 * Message API
 */
@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createMessage()` */
  static readonly CreateMessagePath = '/api/v1.0/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMessage$Response(params: CreateMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<GeneralResponseString>> {
    return createMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMessage(params: CreateMessage$Params, context?: HttpContext): Observable<GeneralResponseString> {
    return this.createMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<GeneralResponseString>): GeneralResponseString => r.body)
    );
  }

  /** Path part for operation `createMessageWithFile()` */
  static readonly CreateMessageWithFilePath = '/api/v1.0/message/files';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMessageWithFile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMessageWithFile$Response(params: CreateMessageWithFile$Params, context?: HttpContext): Observable<StrictHttpResponse<GeneralResponseString>> {
    return createMessageWithFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMessageWithFile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMessageWithFile(params: CreateMessageWithFile$Params, context?: HttpContext): Observable<GeneralResponseString> {
    return this.createMessageWithFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<GeneralResponseString>): GeneralResponseString => r.body)
    );
  }

  /** Path part for operation `setMessagesToSeen()` */
  static readonly SetMessagesToSeenPath = '/api/v1.0/message/seen';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setMessagesToSeen()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setMessagesToSeen$Response(params: SetMessagesToSeen$Params, context?: HttpContext): Observable<StrictHttpResponse<GeneralResponseString>> {
    return setMessagesToSeen(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setMessagesToSeen$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setMessagesToSeen(params: SetMessagesToSeen$Params, context?: HttpContext): Observable<GeneralResponseString> {
    return this.setMessagesToSeen$Response(params, context).pipe(
      map((r: StrictHttpResponse<GeneralResponseString>): GeneralResponseString => r.body)
    );
  }

  /** Path part for operation `getAllMessages()` */
  static readonly GetAllMessagesPath = '/api/v1.0/message/chat/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages$Response(params?: GetAllMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<GeneralResponseListMessageInformationResponse>> {
    return getAllMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages(params?: GetAllMessages$Params, context?: HttpContext): Observable<GeneralResponseListMessageInformationResponse> {
    return this.getAllMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<GeneralResponseListMessageInformationResponse>): GeneralResponseListMessageInformationResponse => r.body)
    );
  }

}
